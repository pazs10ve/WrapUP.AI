import os.path
import base64
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

SCOPES = ["https://www.googleapis.com/auth/gmail.send"]

def _get_credentials(credentials_path='credentials.json', token_path='token.json'):
    """Authenticates with the Gmail API and returns credentials."""
    creds = None
    if os.path.exists(token_path):
        creds = Credentials.from_authorized_user_file(token_path, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(credentials_path, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(token_path, 'w') as token:
            token.write(creds.to_json())
    return creds

def send_summary_email(user_email, summary_text, summary_file_path):
    """
    Creates and sends a meeting summary email with an attachment.

    Args:
        user_email (str): The recipient's email address.
        summary_text (str): The text content of the summary.
        summary_file_path (str): The path to the summary file to be attached.
    """
    creds = _get_credentials()
    service = build('gmail', 'v1', credentials=creds)

    message = MIMEMultipart()
    message['to'] = user_email
    message['from'] = 'me'
    message['subject'] = "Your WrapUp.AI Meeting Summary is Ready!"

    # Email Body
    body = f"""Hi there,\n\nHere is the summary of your recent meeting, generated by WrapUp.AI.\n\n{summary_text}\n\nBest,\nThe WrapUp.AI Team"""
    message.attach(MIMEText(body, 'plain'))

    # Attachment
    if summary_file_path and os.path.exists(summary_file_path):
        with open(summary_file_path, 'rb') as attachment_file:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment_file.read())
        encoders.encode_base64(part)
        part.add_header(
            'Content-Disposition',
            f'attachment; filename={os.path.basename(summary_file_path)}',
        )
        message.attach(part)

    raw_message = {'raw': base64.urlsafe_b64encode(message.as_bytes()).decode()}

    try:
        sent_message = service.users().messages().send(userId='me', body=raw_message).execute()
        print(f"Email sent successfully to {user_email}. Message ID: {sent_message['id']}")
        return sent_message
    except HttpError as error:
        print(f'An error occurred while sending email: {error}')
        raise RuntimeError(f'Failed to send email: {error}')
